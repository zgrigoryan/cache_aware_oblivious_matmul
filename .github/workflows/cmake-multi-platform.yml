name: CMake on multiple platforms

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    # We'll build on either ubuntu-latest or windows-latest
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest]
        build_type: [Release]
        c_compiler: [gcc, clang, cl]
        include:
          - os: windows-latest
            c_compiler: cl
            cpp_compiler: cl
          - os: ubuntu-latest
            c_compiler: gcc
            cpp_compiler: g++
          - os: ubuntu-latest
            c_compiler: clang
            cpp_compiler: clang++
        exclude:
          - os: windows-latest
            c_compiler: gcc
          - os: windows-latest
            c_compiler: clang
          - os: ubuntu-latest
            c_compiler: cl

    steps:
    - uses: actions/checkout@v4

    - name: Set reusable strings
      id: strings
      shell: bash
      run: |
        # We'll build into a subdirectory "build" in the workspace.
        echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"

    - name: Configure CMake
      run: >
        cmake -B ${{ steps.strings.outputs.build-output-dir }}
        -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }}
        -DCMAKE_C_COMPILER=${{ matrix.c_compiler }}
        -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
        -S ${{ github.workspace }}

    - name: Build
      run: cmake --build ${{ steps.strings.outputs.build-output-dir }} --config ${{ matrix.build_type }}

    - name: Test
      working-directory: ${{ steps.strings.outputs.build-output-dir }}
      run: ctest --build-config ${{ matrix.build_type }}

    - name: Run executable and check output format
      # We run in the build directory where the executable is.
      working-directory: ${{ steps.strings.outputs.build-output-dir }}
      # On Windows with the default Visual Studio generator, the output exe goes into
      # the subdirectory named after the build type (e.g. "Release"). On Linux, it's in the current dir.
      # We'll capture stdout to a file "app_output.txt" and then grep for expected lines.
      # If any grep fails, the step fails.
      run: |
        # On Windows:
        if [ "${{ matrix.os }}" = "windows-latest" ]; then
          ./${{ matrix.build_type }}/cache_matmul.exe > app_output.txt
        else
          ./cache_matmul > app_output.txt
        fi

        echo "Checking output format..."

        grep -F "Detected Cache Line Size:" app_output.txt
        grep -F "Detected L1 Cache Size:" app_output.txt
        grep -F "Naive matmul time:" app_output.txt
        grep -F "Cache-aware matmul time:" app_output.txt
        grep -F "Cache-oblivious matmul time:" app_output.txt
        grep -F "1D matmul (std::thread, 8 threads) took" app_output.txt
        grep -F "Results CSV written to results.csv" app_output.txt

        echo "Output format checks passed!"
